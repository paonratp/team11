// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team11/app/ent/book"
	"github.com/team11/app/ent/bookborrow"
	"github.com/team11/app/ent/booking"
	"github.com/team11/app/ent/bookreturn"
	"github.com/team11/app/ent/preemption"
	"github.com/team11/app/ent/research"
	"github.com/team11/app/ent/role"
	"github.com/team11/app/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUSEREMAIL sets the USER_EMAIL field.
func (uc *UserCreate) SetUSEREMAIL(s string) *UserCreate {
	uc.mutation.SetUSEREMAIL(s)
	return uc
}

// SetUSERNAME sets the USER_NAME field.
func (uc *UserCreate) SetUSERNAME(s string) *UserCreate {
	uc.mutation.SetUSERNAME(s)
	return uc
}

// SetPASSWORD sets the PASSWORD field.
func (uc *UserCreate) SetPASSWORD(s string) *UserCreate {
	uc.mutation.SetPASSWORD(s)
	return uc
}

// SetPositionID sets the position edge to Role by id.
func (uc *UserCreate) SetPositionID(id int) *UserCreate {
	uc.mutation.SetPositionID(id)
	return uc
}

// SetNillablePositionID sets the position edge to Role by id if the given value is not nil.
func (uc *UserCreate) SetNillablePositionID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetPositionID(*id)
	}
	return uc
}

// SetPosition sets the position edge to Role.
func (uc *UserCreate) SetPosition(r *Role) *UserCreate {
	return uc.SetPositionID(r.ID)
}

// AddBookingIDs adds the booking edge to Booking by ids.
func (uc *UserCreate) AddBookingIDs(ids ...int) *UserCreate {
	uc.mutation.AddBookingIDs(ids...)
	return uc
}

// AddBooking adds the booking edges to Booking.
func (uc *UserCreate) AddBooking(b ...*Booking) *UserCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddBookingIDs(ids...)
}

// AddAddbyIDs adds the addby edge to Book by ids.
func (uc *UserCreate) AddAddbyIDs(ids ...int) *UserCreate {
	uc.mutation.AddAddbyIDs(ids...)
	return uc
}

// AddAddby adds the addby edges to Book.
func (uc *UserCreate) AddAddby(b ...*Book) *UserCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddAddbyIDs(ids...)
}

// AddBorrowIDs adds the borrow edge to Bookborrow by ids.
func (uc *UserCreate) AddBorrowIDs(ids ...int) *UserCreate {
	uc.mutation.AddBorrowIDs(ids...)
	return uc
}

// AddBorrow adds the borrow edges to Bookborrow.
func (uc *UserCreate) AddBorrow(b ...*Bookborrow) *UserCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddBorrowIDs(ids...)
}

// AddPreemptionIDs adds the preemption edge to Preemption by ids.
func (uc *UserCreate) AddPreemptionIDs(ids ...int) *UserCreate {
	uc.mutation.AddPreemptionIDs(ids...)
	return uc
}

// AddPreemption adds the preemption edges to Preemption.
func (uc *UserCreate) AddPreemption(p ...*Preemption) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPreemptionIDs(ids...)
}

// AddRecordIDs adds the record edge to Research by ids.
func (uc *UserCreate) AddRecordIDs(ids ...int) *UserCreate {
	uc.mutation.AddRecordIDs(ids...)
	return uc
}

// AddRecord adds the record edges to Research.
func (uc *UserCreate) AddRecord(r ...*Research) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRecordIDs(ids...)
}

// AddReturnIDs adds the return edge to Bookreturn by ids.
func (uc *UserCreate) AddReturnIDs(ids ...int) *UserCreate {
	uc.mutation.AddReturnIDs(ids...)
	return uc
}

// AddReturn adds the return edges to Bookreturn.
func (uc *UserCreate) AddReturn(b ...*Bookreturn) *UserCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddReturnIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.USEREMAIL(); !ok {
		return nil, &ValidationError{Name: "USER_EMAIL", err: errors.New("ent: missing required field \"USER_EMAIL\"")}
	}
	if v, ok := uc.mutation.USEREMAIL(); ok {
		if err := user.USEREMAILValidator(v); err != nil {
			return nil, &ValidationError{Name: "USER_EMAIL", err: fmt.Errorf("ent: validator failed for field \"USER_EMAIL\": %w", err)}
		}
	}
	if _, ok := uc.mutation.USERNAME(); !ok {
		return nil, &ValidationError{Name: "USER_NAME", err: errors.New("ent: missing required field \"USER_NAME\"")}
	}
	if v, ok := uc.mutation.USERNAME(); ok {
		if err := user.USERNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "USER_NAME", err: fmt.Errorf("ent: validator failed for field \"USER_NAME\": %w", err)}
		}
	}
	if _, ok := uc.mutation.PASSWORD(); !ok {
		return nil, &ValidationError{Name: "PASSWORD", err: errors.New("ent: missing required field \"PASSWORD\"")}
	}
	if v, ok := uc.mutation.PASSWORD(); ok {
		if err := user.PASSWORDValidator(v); err != nil {
			return nil, &ValidationError{Name: "PASSWORD", err: fmt.Errorf("ent: validator failed for field \"PASSWORD\": %w", err)}
		}
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.USEREMAIL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUSEREMAIL,
		})
		u.USEREMAIL = value
	}
	if value, ok := uc.mutation.USERNAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUSERNAME,
		})
		u.USERNAME = value
	}
	if value, ok := uc.mutation.PASSWORD(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPASSWORD,
		})
		u.PASSWORD = value
	}
	if nodes := uc.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.PositionTable,
			Columns: []string{user.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingTable,
			Columns: []string{user.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AddbyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddbyTable,
			Columns: []string{user.AddbyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BorrowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BorrowTable,
			Columns: []string{user.BorrowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PreemptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PreemptionTable,
			Columns: []string{user.PreemptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preemption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordTable,
			Columns: []string{user.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: research.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ReturnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReturnTable,
			Columns: []string{user.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookreturn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
