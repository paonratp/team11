// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team11/app/ent/roominfo"
)

// Roominfo is the model entity for the Roominfo schema.
type Roominfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoomID holds the value of the "RoomID" field.
	RoomID string `json:"RoomID,omitempty"`
	// RoomNo holds the value of the "RoomNo" field.
	RoomNo string `json:"RoomNo,omitempty"`
	// RoomType holds the value of the "RoomType" field.
	RoomType string `json:"RoomType,omitempty"`
	// RoomTime holds the value of the "RoomTime" field.
	RoomTime string `json:"RoomTime,omitempty"`
	// RoomStatus holds the value of the "RoomStatus" field.
	RoomStatus string `json:"RoomStatus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoominfoQuery when eager-loading is set.
	Edges RoominfoEdges `json:"edges"`
}

// RoominfoEdges holds the relations/edges for other nodes in the graph.
type RoominfoEdges struct {
	// Preemption holds the value of the preemption edge.
	Preemption []*Preemption
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PreemptionOrErr returns the Preemption value or an error if the edge
// was not loaded in eager-loading.
func (e RoominfoEdges) PreemptionOrErr() ([]*Preemption, error) {
	if e.loadedTypes[0] {
		return e.Preemption, nil
	}
	return nil, &NotLoadedError{edge: "preemption"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Roominfo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // RoomID
		&sql.NullString{}, // RoomNo
		&sql.NullString{}, // RoomType
		&sql.NullString{}, // RoomTime
		&sql.NullString{}, // RoomStatus
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Roominfo fields.
func (r *Roominfo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roominfo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RoomID", values[0])
	} else if value.Valid {
		r.RoomID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RoomNo", values[1])
	} else if value.Valid {
		r.RoomNo = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RoomType", values[2])
	} else if value.Valid {
		r.RoomType = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RoomTime", values[3])
	} else if value.Valid {
		r.RoomTime = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RoomStatus", values[4])
	} else if value.Valid {
		r.RoomStatus = value.String
	}
	return nil
}

// QueryPreemption queries the preemption edge of the Roominfo.
func (r *Roominfo) QueryPreemption() *PreemptionQuery {
	return (&RoominfoClient{config: r.config}).QueryPreemption(r)
}

// Update returns a builder for updating this Roominfo.
// Note that, you need to call Roominfo.Unwrap() before calling this method, if this Roominfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Roominfo) Update() *RoominfoUpdateOne {
	return (&RoominfoClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Roominfo) Unwrap() *Roominfo {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Roominfo is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Roominfo) String() string {
	var builder strings.Builder
	builder.WriteString("Roominfo(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", RoomID=")
	builder.WriteString(r.RoomID)
	builder.WriteString(", RoomNo=")
	builder.WriteString(r.RoomNo)
	builder.WriteString(", RoomType=")
	builder.WriteString(r.RoomType)
	builder.WriteString(", RoomTime=")
	builder.WriteString(r.RoomTime)
	builder.WriteString(", RoomStatus=")
	builder.WriteString(r.RoomStatus)
	builder.WriteByte(')')
	return builder.String()
}

// Roominfos is a parsable slice of Roominfo.
type Roominfos []*Roominfo

func (r Roominfos) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
