// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team11/app/ent/book"
	"github.com/team11/app/ent/bookborrow"
	"github.com/team11/app/ent/bookreturn"
	"github.com/team11/app/ent/servicepoint"
	"github.com/team11/app/ent/status"
	"github.com/team11/app/ent/user"
)

// BookborrowCreate is the builder for creating a Bookborrow entity.
type BookborrowCreate struct {
	config
	mutation *BookborrowMutation
	hooks    []Hook
}

// SetBORROWDATE sets the BORROW_DATE field.
func (bc *BookborrowCreate) SetBORROWDATE(t time.Time) *BookborrowCreate {
	bc.mutation.SetBORROWDATE(t)
	return bc
}

// SetNillableBORROWDATE sets the BORROW_DATE field if the given value is not nil.
func (bc *BookborrowCreate) SetNillableBORROWDATE(t *time.Time) *BookborrowCreate {
	if t != nil {
		bc.SetBORROWDATE(*t)
	}
	return bc
}

// SetDAYOFBORROW sets the DAY_OF_BORROW field.
func (bc *BookborrowCreate) SetDAYOFBORROW(i int) *BookborrowCreate {
	bc.mutation.SetDAYOFBORROW(i)
	return bc
}

// SetPICKUP sets the PICKUP field.
func (bc *BookborrowCreate) SetPICKUP(s string) *BookborrowCreate {
	bc.mutation.SetPICKUP(s)
	return bc
}

// SetPHONENUMBER sets the PHONE_NUMBER field.
func (bc *BookborrowCreate) SetPHONENUMBER(s string) *BookborrowCreate {
	bc.mutation.SetPHONENUMBER(s)
	return bc
}

// SetUSERID sets the USER edge to User by id.
func (bc *BookborrowCreate) SetUSERID(id int) *BookborrowCreate {
	bc.mutation.SetUSERID(id)
	return bc
}

// SetNillableUSERID sets the USER edge to User by id if the given value is not nil.
func (bc *BookborrowCreate) SetNillableUSERID(id *int) *BookborrowCreate {
	if id != nil {
		bc = bc.SetUSERID(*id)
	}
	return bc
}

// SetUSER sets the USER edge to User.
func (bc *BookborrowCreate) SetUSER(u *User) *BookborrowCreate {
	return bc.SetUSERID(u.ID)
}

// SetBOOKID sets the BOOK edge to Book by id.
func (bc *BookborrowCreate) SetBOOKID(id int) *BookborrowCreate {
	bc.mutation.SetBOOKID(id)
	return bc
}

// SetNillableBOOKID sets the BOOK edge to Book by id if the given value is not nil.
func (bc *BookborrowCreate) SetNillableBOOKID(id *int) *BookborrowCreate {
	if id != nil {
		bc = bc.SetBOOKID(*id)
	}
	return bc
}

// SetBOOK sets the BOOK edge to Book.
func (bc *BookborrowCreate) SetBOOK(b *Book) *BookborrowCreate {
	return bc.SetBOOKID(b.ID)
}

// SetSERVICEPOINTID sets the SERVICEPOINT edge to ServicePoint by id.
func (bc *BookborrowCreate) SetSERVICEPOINTID(id int) *BookborrowCreate {
	bc.mutation.SetSERVICEPOINTID(id)
	return bc
}

// SetNillableSERVICEPOINTID sets the SERVICEPOINT edge to ServicePoint by id if the given value is not nil.
func (bc *BookborrowCreate) SetNillableSERVICEPOINTID(id *int) *BookborrowCreate {
	if id != nil {
		bc = bc.SetSERVICEPOINTID(*id)
	}
	return bc
}

// SetSERVICEPOINT sets the SERVICEPOINT edge to ServicePoint.
func (bc *BookborrowCreate) SetSERVICEPOINT(s *ServicePoint) *BookborrowCreate {
	return bc.SetSERVICEPOINTID(s.ID)
}

// SetSTATUSID sets the STATUS edge to Status by id.
func (bc *BookborrowCreate) SetSTATUSID(id int) *BookborrowCreate {
	bc.mutation.SetSTATUSID(id)
	return bc
}

// SetNillableSTATUSID sets the STATUS edge to Status by id if the given value is not nil.
func (bc *BookborrowCreate) SetNillableSTATUSID(id *int) *BookborrowCreate {
	if id != nil {
		bc = bc.SetSTATUSID(*id)
	}
	return bc
}

// SetSTATUS sets the STATUS edge to Status.
func (bc *BookborrowCreate) SetSTATUS(s *Status) *BookborrowCreate {
	return bc.SetSTATUSID(s.ID)
}

// AddBorrowedIDs adds the borrowed edge to Bookreturn by ids.
func (bc *BookborrowCreate) AddBorrowedIDs(ids ...int) *BookborrowCreate {
	bc.mutation.AddBorrowedIDs(ids...)
	return bc
}

// AddBorrowed adds the borrowed edges to Bookreturn.
func (bc *BookborrowCreate) AddBorrowed(b ...*Bookreturn) *BookborrowCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBorrowedIDs(ids...)
}

// Mutation returns the BookborrowMutation object of the builder.
func (bc *BookborrowCreate) Mutation() *BookborrowMutation {
	return bc.mutation
}

// Save creates the Bookborrow in the database.
func (bc *BookborrowCreate) Save(ctx context.Context) (*Bookborrow, error) {
	if _, ok := bc.mutation.BORROWDATE(); !ok {
		v := bookborrow.DefaultBORROWDATE()
		bc.mutation.SetBORROWDATE(v)
	}
	if _, ok := bc.mutation.DAYOFBORROW(); !ok {
		return nil, &ValidationError{Name: "DAY_OF_BORROW", err: errors.New("ent: missing required field \"DAY_OF_BORROW\"")}
	}
	if v, ok := bc.mutation.DAYOFBORROW(); ok {
		if err := bookborrow.DAYOFBORROWValidator(v); err != nil {
			return nil, &ValidationError{Name: "DAY_OF_BORROW", err: fmt.Errorf("ent: validator failed for field \"DAY_OF_BORROW\": %w", err)}
		}
	}
	if _, ok := bc.mutation.PICKUP(); !ok {
		return nil, &ValidationError{Name: "PICKUP", err: errors.New("ent: missing required field \"PICKUP\"")}
	}
	if v, ok := bc.mutation.PICKUP(); ok {
		if err := bookborrow.PICKUPValidator(v); err != nil {
			return nil, &ValidationError{Name: "PICKUP", err: fmt.Errorf("ent: validator failed for field \"PICKUP\": %w", err)}
		}
	}
	if _, ok := bc.mutation.PHONENUMBER(); !ok {
		return nil, &ValidationError{Name: "PHONE_NUMBER", err: errors.New("ent: missing required field \"PHONE_NUMBER\"")}
	}
	if v, ok := bc.mutation.PHONENUMBER(); ok {
		if err := bookborrow.PHONENUMBERValidator(v); err != nil {
			return nil, &ValidationError{Name: "PHONE_NUMBER", err: fmt.Errorf("ent: validator failed for field \"PHONE_NUMBER\": %w", err)}
		}
	}
	var (
		err  error
		node *Bookborrow
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookborrowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookborrowCreate) SaveX(ctx context.Context) *Bookborrow {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BookborrowCreate) sqlSave(ctx context.Context) (*Bookborrow, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BookborrowCreate) createSpec() (*Bookborrow, *sqlgraph.CreateSpec) {
	var (
		b     = &Bookborrow{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bookborrow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookborrow.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.BORROWDATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookborrow.FieldBORROWDATE,
		})
		b.BORROWDATE = value
	}
	if value, ok := bc.mutation.DAYOFBORROW(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bookborrow.FieldDAYOFBORROW,
		})
		b.DAYOFBORROW = value
	}
	if value, ok := bc.mutation.PICKUP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookborrow.FieldPICKUP,
		})
		b.PICKUP = value
	}
	if value, ok := bc.mutation.PHONENUMBER(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookborrow.FieldPHONENUMBER,
		})
		b.PHONENUMBER = value
	}
	if nodes := bc.mutation.USERIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.USERTable,
			Columns: []string{bookborrow.USERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.BOOKTable,
			Columns: []string{bookborrow.BOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.SERVICEPOINTIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.SERVICEPOINTTable,
			Columns: []string{bookborrow.SERVICEPOINTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicepoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.STATUSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.STATUSTable,
			Columns: []string{bookborrow.STATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BorrowedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bookborrow.BorrowedTable,
			Columns: []string{bookborrow.BorrowedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookreturn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
