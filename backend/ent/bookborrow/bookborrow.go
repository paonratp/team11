// Code generated by entc, DO NOT EDIT.

package bookborrow

import (
	"time"
)

const (
	// Label holds the string label denoting the bookborrow type in the database.
	Label = "bookborrow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBORROWDATE holds the string denoting the borrow_date field in the database.
	FieldBORROWDATE = "borrow_date"
	// FieldDAYOFBORROW holds the string denoting the day_of_borrow field in the database.
	FieldDAYOFBORROW = "day_of_borrow"
	// FieldPICKUP holds the string denoting the pickup field in the database.
	FieldPICKUP = "pickup"
	// FieldPHONENUMBER holds the string denoting the phone_number field in the database.
	FieldPHONENUMBER = "phone_number"

	// EdgeUSER holds the string denoting the user edge name in mutations.
	EdgeUSER = "USER"
	// EdgeBOOK holds the string denoting the book edge name in mutations.
	EdgeBOOK = "BOOK"
	// EdgeSERVICEPOINT holds the string denoting the servicepoint edge name in mutations.
	EdgeSERVICEPOINT = "SERVICEPOINT"
	// EdgeSTATUS holds the string denoting the status edge name in mutations.
	EdgeSTATUS = "STATUS"
	// EdgeBorrowed holds the string denoting the borrowed edge name in mutations.
	EdgeBorrowed = "borrowed"

	// Table holds the table name of the bookborrow in the database.
	Table = "bookborrows"
	// USERTable is the table the holds the USER relation/edge.
	USERTable = "bookborrows"
	// USERInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	USERInverseTable = "users"
	// USERColumn is the table column denoting the USER relation/edge.
	USERColumn = "USER_ID"
	// BOOKTable is the table the holds the BOOK relation/edge.
	BOOKTable = "bookborrows"
	// BOOKInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	BOOKInverseTable = "books"
	// BOOKColumn is the table column denoting the BOOK relation/edge.
	BOOKColumn = "BOOK_ID"
	// SERVICEPOINTTable is the table the holds the SERVICEPOINT relation/edge.
	SERVICEPOINTTable = "bookborrows"
	// SERVICEPOINTInverseTable is the table name for the ServicePoint entity.
	// It exists in this package in order to avoid circular dependency with the "servicepoint" package.
	SERVICEPOINTInverseTable = "service_points"
	// SERVICEPOINTColumn is the table column denoting the SERVICEPOINT relation/edge.
	SERVICEPOINTColumn = "SERVICEPOINT_ID"
	// STATUSTable is the table the holds the STATUS relation/edge.
	STATUSTable = "bookborrows"
	// STATUSInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	STATUSInverseTable = "status"
	// STATUSColumn is the table column denoting the STATUS relation/edge.
	STATUSColumn = "STATUS_ID"
	// BorrowedTable is the table the holds the borrowed relation/edge.
	BorrowedTable = "bookreturns"
	// BorrowedInverseTable is the table name for the Bookreturn entity.
	// It exists in this package in order to avoid circular dependency with the "bookreturn" package.
	BorrowedInverseTable = "bookreturns"
	// BorrowedColumn is the table column denoting the borrowed relation/edge.
	BorrowedColumn = "CLIENT_ID"
)

// Columns holds all SQL columns for bookborrow fields.
var Columns = []string{
	FieldID,
	FieldBORROWDATE,
	FieldDAYOFBORROW,
	FieldPICKUP,
	FieldPHONENUMBER,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Bookborrow type.
var ForeignKeys = []string{
	"BOOK_ID",
	"SERVICEPOINT_ID",
	"STATUS_ID",
	"USER_ID",
}

var (
	// DefaultBORROWDATE holds the default value on creation for the BORROW_DATE field.
	DefaultBORROWDATE func() time.Time
	// DAYOFBORROWValidator is a validator for the "DAY_OF_BORROW" field. It is called by the builders before save.
	DAYOFBORROWValidator func(int) error
	// PICKUPValidator is a validator for the "PICKUP" field. It is called by the builders before save.
	PICKUPValidator func(string) error
	// PHONENUMBERValidator is a validator for the "PHONE_NUMBER" field. It is called by the builders before save.
	PHONENUMBERValidator func(string) error
)
