// Code generated by entc, DO NOT EDIT.

package bookborrow

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team11/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BORROWDATE applies equality check predicate on the "BORROW_DATE" field. It's identical to BORROWDATEEQ.
func BORROWDATE(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBORROWDATE), v))
	})
}

// DAYOFBORROW applies equality check predicate on the "DAY_OF_BORROW" field. It's identical to DAYOFBORROWEQ.
func DAYOFBORROW(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDAYOFBORROW), v))
	})
}

// PICKUP applies equality check predicate on the "PICKUP" field. It's identical to PICKUPEQ.
func PICKUP(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPICKUP), v))
	})
}

// PHONENUMBER applies equality check predicate on the "PHONE_NUMBER" field. It's identical to PHONENUMBEREQ.
func PHONENUMBER(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPHONENUMBER), v))
	})
}

// BORROWDATEEQ applies the EQ predicate on the "BORROW_DATE" field.
func BORROWDATEEQ(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBORROWDATE), v))
	})
}

// BORROWDATENEQ applies the NEQ predicate on the "BORROW_DATE" field.
func BORROWDATENEQ(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBORROWDATE), v))
	})
}

// BORROWDATEIn applies the In predicate on the "BORROW_DATE" field.
func BORROWDATEIn(vs ...time.Time) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBORROWDATE), v...))
	})
}

// BORROWDATENotIn applies the NotIn predicate on the "BORROW_DATE" field.
func BORROWDATENotIn(vs ...time.Time) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBORROWDATE), v...))
	})
}

// BORROWDATEGT applies the GT predicate on the "BORROW_DATE" field.
func BORROWDATEGT(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBORROWDATE), v))
	})
}

// BORROWDATEGTE applies the GTE predicate on the "BORROW_DATE" field.
func BORROWDATEGTE(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBORROWDATE), v))
	})
}

// BORROWDATELT applies the LT predicate on the "BORROW_DATE" field.
func BORROWDATELT(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBORROWDATE), v))
	})
}

// BORROWDATELTE applies the LTE predicate on the "BORROW_DATE" field.
func BORROWDATELTE(v time.Time) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBORROWDATE), v))
	})
}

// DAYOFBORROWEQ applies the EQ predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWEQ(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDAYOFBORROW), v))
	})
}

// DAYOFBORROWNEQ applies the NEQ predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWNEQ(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDAYOFBORROW), v))
	})
}

// DAYOFBORROWIn applies the In predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWIn(vs ...int) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDAYOFBORROW), v...))
	})
}

// DAYOFBORROWNotIn applies the NotIn predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWNotIn(vs ...int) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDAYOFBORROW), v...))
	})
}

// DAYOFBORROWGT applies the GT predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWGT(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDAYOFBORROW), v))
	})
}

// DAYOFBORROWGTE applies the GTE predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWGTE(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDAYOFBORROW), v))
	})
}

// DAYOFBORROWLT applies the LT predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWLT(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDAYOFBORROW), v))
	})
}

// DAYOFBORROWLTE applies the LTE predicate on the "DAY_OF_BORROW" field.
func DAYOFBORROWLTE(v int) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDAYOFBORROW), v))
	})
}

// PICKUPEQ applies the EQ predicate on the "PICKUP" field.
func PICKUPEQ(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPICKUP), v))
	})
}

// PICKUPNEQ applies the NEQ predicate on the "PICKUP" field.
func PICKUPNEQ(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPICKUP), v))
	})
}

// PICKUPIn applies the In predicate on the "PICKUP" field.
func PICKUPIn(vs ...string) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPICKUP), v...))
	})
}

// PICKUPNotIn applies the NotIn predicate on the "PICKUP" field.
func PICKUPNotIn(vs ...string) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPICKUP), v...))
	})
}

// PICKUPGT applies the GT predicate on the "PICKUP" field.
func PICKUPGT(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPICKUP), v))
	})
}

// PICKUPGTE applies the GTE predicate on the "PICKUP" field.
func PICKUPGTE(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPICKUP), v))
	})
}

// PICKUPLT applies the LT predicate on the "PICKUP" field.
func PICKUPLT(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPICKUP), v))
	})
}

// PICKUPLTE applies the LTE predicate on the "PICKUP" field.
func PICKUPLTE(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPICKUP), v))
	})
}

// PICKUPContains applies the Contains predicate on the "PICKUP" field.
func PICKUPContains(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPICKUP), v))
	})
}

// PICKUPHasPrefix applies the HasPrefix predicate on the "PICKUP" field.
func PICKUPHasPrefix(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPICKUP), v))
	})
}

// PICKUPHasSuffix applies the HasSuffix predicate on the "PICKUP" field.
func PICKUPHasSuffix(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPICKUP), v))
	})
}

// PICKUPEqualFold applies the EqualFold predicate on the "PICKUP" field.
func PICKUPEqualFold(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPICKUP), v))
	})
}

// PICKUPContainsFold applies the ContainsFold predicate on the "PICKUP" field.
func PICKUPContainsFold(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPICKUP), v))
	})
}

// PHONENUMBEREQ applies the EQ predicate on the "PHONE_NUMBER" field.
func PHONENUMBEREQ(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERNEQ applies the NEQ predicate on the "PHONE_NUMBER" field.
func PHONENUMBERNEQ(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERIn applies the In predicate on the "PHONE_NUMBER" field.
func PHONENUMBERIn(vs ...string) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPHONENUMBER), v...))
	})
}

// PHONENUMBERNotIn applies the NotIn predicate on the "PHONE_NUMBER" field.
func PHONENUMBERNotIn(vs ...string) predicate.Bookborrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookborrow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPHONENUMBER), v...))
	})
}

// PHONENUMBERGT applies the GT predicate on the "PHONE_NUMBER" field.
func PHONENUMBERGT(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERGTE applies the GTE predicate on the "PHONE_NUMBER" field.
func PHONENUMBERGTE(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERLT applies the LT predicate on the "PHONE_NUMBER" field.
func PHONENUMBERLT(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERLTE applies the LTE predicate on the "PHONE_NUMBER" field.
func PHONENUMBERLTE(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERContains applies the Contains predicate on the "PHONE_NUMBER" field.
func PHONENUMBERContains(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERHasPrefix applies the HasPrefix predicate on the "PHONE_NUMBER" field.
func PHONENUMBERHasPrefix(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERHasSuffix applies the HasSuffix predicate on the "PHONE_NUMBER" field.
func PHONENUMBERHasSuffix(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBEREqualFold applies the EqualFold predicate on the "PHONE_NUMBER" field.
func PHONENUMBEREqualFold(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPHONENUMBER), v))
	})
}

// PHONENUMBERContainsFold applies the ContainsFold predicate on the "PHONE_NUMBER" field.
func PHONENUMBERContainsFold(v string) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPHONENUMBER), v))
	})
}

// HasUSER applies the HasEdge predicate on the "USER" edge.
func HasUSER() predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(USERTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, USERTable, USERColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUSERWith applies the HasEdge predicate on the "USER" edge with a given conditions (other predicates).
func HasUSERWith(preds ...predicate.User) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(USERInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, USERTable, USERColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBOOK applies the HasEdge predicate on the "BOOK" edge.
func HasBOOK() predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKTable, BOOKColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBOOKWith applies the HasEdge predicate on the "BOOK" edge with a given conditions (other predicates).
func HasBOOKWith(preds ...predicate.Book) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKTable, BOOKColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSERVICEPOINT applies the HasEdge predicate on the "SERVICEPOINT" edge.
func HasSERVICEPOINT() predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SERVICEPOINTTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SERVICEPOINTTable, SERVICEPOINTColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSERVICEPOINTWith applies the HasEdge predicate on the "SERVICEPOINT" edge with a given conditions (other predicates).
func HasSERVICEPOINTWith(preds ...predicate.ServicePoint) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SERVICEPOINTInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SERVICEPOINTTable, SERVICEPOINTColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSTATUS applies the HasEdge predicate on the "STATUS" edge.
func HasSTATUS() predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(STATUSTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, STATUSTable, STATUSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSTATUSWith applies the HasEdge predicate on the "STATUS" edge with a given conditions (other predicates).
func HasSTATUSWith(preds ...predicate.Status) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(STATUSInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, STATUSTable, STATUSColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBorrowed applies the HasEdge predicate on the "borrowed" edge.
func HasBorrowed() predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BorrowedTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BorrowedTable, BorrowedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBorrowedWith applies the HasEdge predicate on the "borrowed" edge with a given conditions (other predicates).
func HasBorrowedWith(preds ...predicate.Bookreturn) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BorrowedInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BorrowedTable, BorrowedColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Bookborrow) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Bookborrow) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bookborrow) predicate.Bookborrow {
	return predicate.Bookborrow(func(s *sql.Selector) {
		p(s.Not())
	})
}
