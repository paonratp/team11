// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/team11/app/ent"
)

// The AuthorFunc type is an adapter to allow the use of ordinary
// function as Author mutator.
type AuthorFunc func(context.Context, *ent.AuthorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuthorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AuthorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuthorMutation", m)
	}
	return f(ctx, mv)
}

// The BookFunc type is an adapter to allow the use of ordinary
// function as Book mutator.
type BookFunc func(context.Context, *ent.BookMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BookFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BookMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BookMutation", m)
	}
	return f(ctx, mv)
}

// The BookborrowFunc type is an adapter to allow the use of ordinary
// function as Bookborrow mutator.
type BookborrowFunc func(context.Context, *ent.BookborrowMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BookborrowFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BookborrowMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BookborrowMutation", m)
	}
	return f(ctx, mv)
}

// The BookingFunc type is an adapter to allow the use of ordinary
// function as Booking mutator.
type BookingFunc func(context.Context, *ent.BookingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BookingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BookingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BookingMutation", m)
	}
	return f(ctx, mv)
}

// The BookreturnFunc type is an adapter to allow the use of ordinary
// function as Bookreturn mutator.
type BookreturnFunc func(context.Context, *ent.BookreturnMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BookreturnFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BookreturnMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BookreturnMutation", m)
	}
	return f(ctx, mv)
}

// The CategoryFunc type is an adapter to allow the use of ordinary
// function as Category mutator.
type CategoryFunc func(context.Context, *ent.CategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CategoryMutation", m)
	}
	return f(ctx, mv)
}

// The ClientEntityFunc type is an adapter to allow the use of ordinary
// function as ClientEntity mutator.
type ClientEntityFunc func(context.Context, *ent.ClientEntityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClientEntityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClientEntityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClientEntityMutation", m)
	}
	return f(ctx, mv)
}

// The LocationFunc type is an adapter to allow the use of ordinary
// function as Location mutator.
type LocationFunc func(context.Context, *ent.LocationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LocationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocationMutation", m)
	}
	return f(ctx, mv)
}

// The PreemptionFunc type is an adapter to allow the use of ordinary
// function as Preemption mutator.
type PreemptionFunc func(context.Context, *ent.PreemptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PreemptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PreemptionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PreemptionMutation", m)
	}
	return f(ctx, mv)
}

// The PurposeFunc type is an adapter to allow the use of ordinary
// function as Purpose mutator.
type PurposeFunc func(context.Context, *ent.PurposeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PurposeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PurposeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PurposeMutation", m)
	}
	return f(ctx, mv)
}

// The ResearchFunc type is an adapter to allow the use of ordinary
// function as Research mutator.
type ResearchFunc func(context.Context, *ent.ResearchMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ResearchFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ResearchMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ResearchMutation", m)
	}
	return f(ctx, mv)
}

// The ResearchtypeFunc type is an adapter to allow the use of ordinary
// function as Researchtype mutator.
type ResearchtypeFunc func(context.Context, *ent.ResearchtypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ResearchtypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ResearchtypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ResearchtypeMutation", m)
	}
	return f(ctx, mv)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *ent.RoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleMutation", m)
	}
	return f(ctx, mv)
}

// The RoominfoFunc type is an adapter to allow the use of ordinary
// function as Roominfo mutator.
type RoominfoFunc func(context.Context, *ent.RoominfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoominfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoominfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoominfoMutation", m)
	}
	return f(ctx, mv)
}

// The ServicePointFunc type is an adapter to allow the use of ordinary
// function as ServicePoint mutator.
type ServicePointFunc func(context.Context, *ent.ServicePointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServicePointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ServicePointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServicePointMutation", m)
	}
	return f(ctx, mv)
}

// The StatusFunc type is an adapter to allow the use of ordinary
// function as Status mutator.
type StatusFunc func(context.Context, *ent.StatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	Hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(_ context.Context, m ent.Mutation) (ent.Value, error) {
			return nil, fmt.Errorf("%s operation is not allowed", m.Op())
		})
	}
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
