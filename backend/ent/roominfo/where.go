// Code generated by entc, DO NOT EDIT.

package roominfo

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team11/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RoomID applies equality check predicate on the "RoomID" field. It's identical to RoomIDEQ.
func RoomID(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomID), v))
	})
}

// RoomNo applies equality check predicate on the "RoomNo" field. It's identical to RoomNoEQ.
func RoomNo(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomNo), v))
	})
}

// RoomType applies equality check predicate on the "RoomType" field. It's identical to RoomTypeEQ.
func RoomType(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomType), v))
	})
}

// RoomTime applies equality check predicate on the "RoomTime" field. It's identical to RoomTimeEQ.
func RoomTime(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomTime), v))
	})
}

// RoomStatus applies equality check predicate on the "RoomStatus" field. It's identical to RoomStatusEQ.
func RoomStatus(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomStatus), v))
	})
}

// RoomIDEQ applies the EQ predicate on the "RoomID" field.
func RoomIDEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomID), v))
	})
}

// RoomIDNEQ applies the NEQ predicate on the "RoomID" field.
func RoomIDNEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomID), v))
	})
}

// RoomIDIn applies the In predicate on the "RoomID" field.
func RoomIDIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomID), v...))
	})
}

// RoomIDNotIn applies the NotIn predicate on the "RoomID" field.
func RoomIDNotIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomID), v...))
	})
}

// RoomIDGT applies the GT predicate on the "RoomID" field.
func RoomIDGT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomID), v))
	})
}

// RoomIDGTE applies the GTE predicate on the "RoomID" field.
func RoomIDGTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomID), v))
	})
}

// RoomIDLT applies the LT predicate on the "RoomID" field.
func RoomIDLT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomID), v))
	})
}

// RoomIDLTE applies the LTE predicate on the "RoomID" field.
func RoomIDLTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomID), v))
	})
}

// RoomIDContains applies the Contains predicate on the "RoomID" field.
func RoomIDContains(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomID), v))
	})
}

// RoomIDHasPrefix applies the HasPrefix predicate on the "RoomID" field.
func RoomIDHasPrefix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomID), v))
	})
}

// RoomIDHasSuffix applies the HasSuffix predicate on the "RoomID" field.
func RoomIDHasSuffix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomID), v))
	})
}

// RoomIDEqualFold applies the EqualFold predicate on the "RoomID" field.
func RoomIDEqualFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomID), v))
	})
}

// RoomIDContainsFold applies the ContainsFold predicate on the "RoomID" field.
func RoomIDContainsFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomID), v))
	})
}

// RoomNoEQ applies the EQ predicate on the "RoomNo" field.
func RoomNoEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomNo), v))
	})
}

// RoomNoNEQ applies the NEQ predicate on the "RoomNo" field.
func RoomNoNEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomNo), v))
	})
}

// RoomNoIn applies the In predicate on the "RoomNo" field.
func RoomNoIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomNo), v...))
	})
}

// RoomNoNotIn applies the NotIn predicate on the "RoomNo" field.
func RoomNoNotIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomNo), v...))
	})
}

// RoomNoGT applies the GT predicate on the "RoomNo" field.
func RoomNoGT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomNo), v))
	})
}

// RoomNoGTE applies the GTE predicate on the "RoomNo" field.
func RoomNoGTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomNo), v))
	})
}

// RoomNoLT applies the LT predicate on the "RoomNo" field.
func RoomNoLT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomNo), v))
	})
}

// RoomNoLTE applies the LTE predicate on the "RoomNo" field.
func RoomNoLTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomNo), v))
	})
}

// RoomNoContains applies the Contains predicate on the "RoomNo" field.
func RoomNoContains(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomNo), v))
	})
}

// RoomNoHasPrefix applies the HasPrefix predicate on the "RoomNo" field.
func RoomNoHasPrefix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomNo), v))
	})
}

// RoomNoHasSuffix applies the HasSuffix predicate on the "RoomNo" field.
func RoomNoHasSuffix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomNo), v))
	})
}

// RoomNoEqualFold applies the EqualFold predicate on the "RoomNo" field.
func RoomNoEqualFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomNo), v))
	})
}

// RoomNoContainsFold applies the ContainsFold predicate on the "RoomNo" field.
func RoomNoContainsFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomNo), v))
	})
}

// RoomTypeEQ applies the EQ predicate on the "RoomType" field.
func RoomTypeEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomType), v))
	})
}

// RoomTypeNEQ applies the NEQ predicate on the "RoomType" field.
func RoomTypeNEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomType), v))
	})
}

// RoomTypeIn applies the In predicate on the "RoomType" field.
func RoomTypeIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomType), v...))
	})
}

// RoomTypeNotIn applies the NotIn predicate on the "RoomType" field.
func RoomTypeNotIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomType), v...))
	})
}

// RoomTypeGT applies the GT predicate on the "RoomType" field.
func RoomTypeGT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomType), v))
	})
}

// RoomTypeGTE applies the GTE predicate on the "RoomType" field.
func RoomTypeGTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomType), v))
	})
}

// RoomTypeLT applies the LT predicate on the "RoomType" field.
func RoomTypeLT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomType), v))
	})
}

// RoomTypeLTE applies the LTE predicate on the "RoomType" field.
func RoomTypeLTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomType), v))
	})
}

// RoomTypeContains applies the Contains predicate on the "RoomType" field.
func RoomTypeContains(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomType), v))
	})
}

// RoomTypeHasPrefix applies the HasPrefix predicate on the "RoomType" field.
func RoomTypeHasPrefix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomType), v))
	})
}

// RoomTypeHasSuffix applies the HasSuffix predicate on the "RoomType" field.
func RoomTypeHasSuffix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomType), v))
	})
}

// RoomTypeEqualFold applies the EqualFold predicate on the "RoomType" field.
func RoomTypeEqualFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomType), v))
	})
}

// RoomTypeContainsFold applies the ContainsFold predicate on the "RoomType" field.
func RoomTypeContainsFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomType), v))
	})
}

// RoomTimeEQ applies the EQ predicate on the "RoomTime" field.
func RoomTimeEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomTime), v))
	})
}

// RoomTimeNEQ applies the NEQ predicate on the "RoomTime" field.
func RoomTimeNEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomTime), v))
	})
}

// RoomTimeIn applies the In predicate on the "RoomTime" field.
func RoomTimeIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomTime), v...))
	})
}

// RoomTimeNotIn applies the NotIn predicate on the "RoomTime" field.
func RoomTimeNotIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomTime), v...))
	})
}

// RoomTimeGT applies the GT predicate on the "RoomTime" field.
func RoomTimeGT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomTime), v))
	})
}

// RoomTimeGTE applies the GTE predicate on the "RoomTime" field.
func RoomTimeGTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomTime), v))
	})
}

// RoomTimeLT applies the LT predicate on the "RoomTime" field.
func RoomTimeLT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomTime), v))
	})
}

// RoomTimeLTE applies the LTE predicate on the "RoomTime" field.
func RoomTimeLTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomTime), v))
	})
}

// RoomTimeContains applies the Contains predicate on the "RoomTime" field.
func RoomTimeContains(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomTime), v))
	})
}

// RoomTimeHasPrefix applies the HasPrefix predicate on the "RoomTime" field.
func RoomTimeHasPrefix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomTime), v))
	})
}

// RoomTimeHasSuffix applies the HasSuffix predicate on the "RoomTime" field.
func RoomTimeHasSuffix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomTime), v))
	})
}

// RoomTimeEqualFold applies the EqualFold predicate on the "RoomTime" field.
func RoomTimeEqualFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomTime), v))
	})
}

// RoomTimeContainsFold applies the ContainsFold predicate on the "RoomTime" field.
func RoomTimeContainsFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomTime), v))
	})
}

// RoomStatusEQ applies the EQ predicate on the "RoomStatus" field.
func RoomStatusEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusNEQ applies the NEQ predicate on the "RoomStatus" field.
func RoomStatusNEQ(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusIn applies the In predicate on the "RoomStatus" field.
func RoomStatusIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomStatus), v...))
	})
}

// RoomStatusNotIn applies the NotIn predicate on the "RoomStatus" field.
func RoomStatusNotIn(vs ...string) predicate.Roominfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roominfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomStatus), v...))
	})
}

// RoomStatusGT applies the GT predicate on the "RoomStatus" field.
func RoomStatusGT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusGTE applies the GTE predicate on the "RoomStatus" field.
func RoomStatusGTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusLT applies the LT predicate on the "RoomStatus" field.
func RoomStatusLT(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusLTE applies the LTE predicate on the "RoomStatus" field.
func RoomStatusLTE(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusContains applies the Contains predicate on the "RoomStatus" field.
func RoomStatusContains(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusHasPrefix applies the HasPrefix predicate on the "RoomStatus" field.
func RoomStatusHasPrefix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusHasSuffix applies the HasSuffix predicate on the "RoomStatus" field.
func RoomStatusHasSuffix(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusEqualFold applies the EqualFold predicate on the "RoomStatus" field.
func RoomStatusEqualFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomStatus), v))
	})
}

// RoomStatusContainsFold applies the ContainsFold predicate on the "RoomStatus" field.
func RoomStatusContainsFold(v string) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomStatus), v))
	})
}

// HasPreemption applies the HasEdge predicate on the "preemption" edge.
func HasPreemption() predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PreemptionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PreemptionTable, PreemptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPreemptionWith applies the HasEdge predicate on the "preemption" edge with a given conditions (other predicates).
func HasPreemptionWith(preds ...predicate.Preemption) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PreemptionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PreemptionTable, PreemptionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Roominfo) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Roominfo) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Roominfo) predicate.Roominfo {
	return predicate.Roominfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
