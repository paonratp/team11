// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team11/app/ent/bookborrow"
	"github.com/team11/app/ent/booking"
	"github.com/team11/app/ent/predicate"
	"github.com/team11/app/ent/servicepoint"
)

// ServicePointQuery is the builder for querying ServicePoint entities.
type ServicePointQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ServicePoint
	// eager-loading edges.
	withFrom         *BookborrowQuery
	withServicepoint *BookingQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (spq *ServicePointQuery) Where(ps ...predicate.ServicePoint) *ServicePointQuery {
	spq.predicates = append(spq.predicates, ps...)
	return spq
}

// Limit adds a limit step to the query.
func (spq *ServicePointQuery) Limit(limit int) *ServicePointQuery {
	spq.limit = &limit
	return spq
}

// Offset adds an offset step to the query.
func (spq *ServicePointQuery) Offset(offset int) *ServicePointQuery {
	spq.offset = &offset
	return spq
}

// Order adds an order step to the query.
func (spq *ServicePointQuery) Order(o ...OrderFunc) *ServicePointQuery {
	spq.order = append(spq.order, o...)
	return spq
}

// QueryFrom chains the current query on the from edge.
func (spq *ServicePointQuery) QueryFrom() *BookborrowQuery {
	query := &BookborrowQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servicepoint.Table, servicepoint.FieldID, spq.sqlQuery()),
			sqlgraph.To(bookborrow.Table, bookborrow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servicepoint.FromTable, servicepoint.FromColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServicepoint chains the current query on the servicepoint edge.
func (spq *ServicePointQuery) QueryServicepoint() *BookingQuery {
	query := &BookingQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servicepoint.Table, servicepoint.FieldID, spq.sqlQuery()),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servicepoint.ServicepointTable, servicepoint.ServicepointColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServicePoint entity in the query. Returns *NotFoundError when no servicepoint was found.
func (spq *ServicePointQuery) First(ctx context.Context) (*ServicePoint, error) {
	sps, err := spq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(sps) == 0 {
		return nil, &NotFoundError{servicepoint.Label}
	}
	return sps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spq *ServicePointQuery) FirstX(ctx context.Context) *ServicePoint {
	sp, err := spq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return sp
}

// FirstID returns the first ServicePoint id in the query. Returns *NotFoundError when no id was found.
func (spq *ServicePointQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{servicepoint.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (spq *ServicePointQuery) FirstXID(ctx context.Context) int {
	id, err := spq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ServicePoint entity in the query, returns an error if not exactly one entity was returned.
func (spq *ServicePointQuery) Only(ctx context.Context) (*ServicePoint, error) {
	sps, err := spq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(sps) {
	case 1:
		return sps[0], nil
	case 0:
		return nil, &NotFoundError{servicepoint.Label}
	default:
		return nil, &NotSingularError{servicepoint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spq *ServicePointQuery) OnlyX(ctx context.Context) *ServicePoint {
	sp, err := spq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return sp
}

// OnlyID returns the only ServicePoint id in the query, returns an error if not exactly one id was returned.
func (spq *ServicePointQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = &NotSingularError{servicepoint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spq *ServicePointQuery) OnlyIDX(ctx context.Context) int {
	id, err := spq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServicePoints.
func (spq *ServicePointQuery) All(ctx context.Context) ([]*ServicePoint, error) {
	if err := spq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return spq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (spq *ServicePointQuery) AllX(ctx context.Context) []*ServicePoint {
	sps, err := spq.All(ctx)
	if err != nil {
		panic(err)
	}
	return sps
}

// IDs executes the query and returns a list of ServicePoint ids.
func (spq *ServicePointQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := spq.Select(servicepoint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spq *ServicePointQuery) IDsX(ctx context.Context) []int {
	ids, err := spq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spq *ServicePointQuery) Count(ctx context.Context) (int, error) {
	if err := spq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return spq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (spq *ServicePointQuery) CountX(ctx context.Context) int {
	count, err := spq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spq *ServicePointQuery) Exist(ctx context.Context) (bool, error) {
	if err := spq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return spq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (spq *ServicePointQuery) ExistX(ctx context.Context) bool {
	exist, err := spq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spq *ServicePointQuery) Clone() *ServicePointQuery {
	return &ServicePointQuery{
		config:     spq.config,
		limit:      spq.limit,
		offset:     spq.offset,
		order:      append([]OrderFunc{}, spq.order...),
		unique:     append([]string{}, spq.unique...),
		predicates: append([]predicate.ServicePoint{}, spq.predicates...),
		// clone intermediate query.
		sql:  spq.sql.Clone(),
		path: spq.path,
	}
}

//  WithFrom tells the query-builder to eager-loads the nodes that are connected to
// the "from" edge. The optional arguments used to configure the query builder of the edge.
func (spq *ServicePointQuery) WithFrom(opts ...func(*BookborrowQuery)) *ServicePointQuery {
	query := &BookborrowQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withFrom = query
	return spq
}

//  WithServicepoint tells the query-builder to eager-loads the nodes that are connected to
// the "servicepoint" edge. The optional arguments used to configure the query builder of the edge.
func (spq *ServicePointQuery) WithServicepoint(opts ...func(*BookingQuery)) *ServicePointQuery {
	query := &BookingQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withServicepoint = query
	return spq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		COUNTERNUMBER string `json:"COUNTER_NUMBER,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServicePoint.Query().
//		GroupBy(servicepoint.FieldCOUNTERNUMBER).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (spq *ServicePointQuery) GroupBy(field string, fields ...string) *ServicePointGroupBy {
	group := &ServicePointGroupBy{config: spq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return spq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		COUNTERNUMBER string `json:"COUNTER_NUMBER,omitempty"`
//	}
//
//	client.ServicePoint.Query().
//		Select(servicepoint.FieldCOUNTERNUMBER).
//		Scan(ctx, &v)
//
func (spq *ServicePointQuery) Select(field string, fields ...string) *ServicePointSelect {
	selector := &ServicePointSelect{config: spq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return spq.sqlQuery(), nil
	}
	return selector
}

func (spq *ServicePointQuery) prepareQuery(ctx context.Context) error {
	if spq.path != nil {
		prev, err := spq.path(ctx)
		if err != nil {
			return err
		}
		spq.sql = prev
	}
	return nil
}

func (spq *ServicePointQuery) sqlAll(ctx context.Context) ([]*ServicePoint, error) {
	var (
		nodes       = []*ServicePoint{}
		_spec       = spq.querySpec()
		loadedTypes = [2]bool{
			spq.withFrom != nil,
			spq.withServicepoint != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ServicePoint{config: spq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, spq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := spq.withFrom; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ServicePoint)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Bookborrow(func(s *sql.Selector) {
			s.Where(sql.InValues(servicepoint.FromColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SERVICEPOINT_ID
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "SERVICEPOINT_ID" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "SERVICEPOINT_ID" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.From = append(node.Edges.From, n)
		}
	}

	if query := spq.withServicepoint; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ServicePoint)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Booking(func(s *sql.Selector) {
			s.Where(sql.InValues(servicepoint.ServicepointColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SERVICEPOINT_ID
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "SERVICEPOINT_ID" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "SERVICEPOINT_ID" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Servicepoint = append(node.Edges.Servicepoint, n)
		}
	}

	return nodes, nil
}

func (spq *ServicePointQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spq.querySpec()
	return sqlgraph.CountNodes(ctx, spq.driver, _spec)
}

func (spq *ServicePointQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := spq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (spq *ServicePointQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicepoint.Table,
			Columns: servicepoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicepoint.FieldID,
			},
		},
		From:   spq.sql,
		Unique: true,
	}
	if ps := spq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spq *ServicePointQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(spq.driver.Dialect())
	t1 := builder.Table(servicepoint.Table)
	selector := builder.Select(t1.Columns(servicepoint.Columns...)...).From(t1)
	if spq.sql != nil {
		selector = spq.sql
		selector.Select(selector.Columns(servicepoint.Columns...)...)
	}
	for _, p := range spq.predicates {
		p(selector)
	}
	for _, p := range spq.order {
		p(selector)
	}
	if offset := spq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServicePointGroupBy is the builder for group-by ServicePoint entities.
type ServicePointGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spgb *ServicePointGroupBy) Aggregate(fns ...AggregateFunc) *ServicePointGroupBy {
	spgb.fns = append(spgb.fns, fns...)
	return spgb
}

// Scan applies the group-by query and scan the result into the given value.
func (spgb *ServicePointGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := spgb.path(ctx)
	if err != nil {
		return err
	}
	spgb.sql = query
	return spgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (spgb *ServicePointGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := spgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: ServicePointGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (spgb *ServicePointGroupBy) StringsX(ctx context.Context) []string {
	v, err := spgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = spgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (spgb *ServicePointGroupBy) StringX(ctx context.Context) string {
	v, err := spgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: ServicePointGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (spgb *ServicePointGroupBy) IntsX(ctx context.Context) []int {
	v, err := spgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = spgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (spgb *ServicePointGroupBy) IntX(ctx context.Context) int {
	v, err := spgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: ServicePointGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (spgb *ServicePointGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := spgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = spgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (spgb *ServicePointGroupBy) Float64X(ctx context.Context) float64 {
	v, err := spgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: ServicePointGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (spgb *ServicePointGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := spgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (spgb *ServicePointGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = spgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (spgb *ServicePointGroupBy) BoolX(ctx context.Context) bool {
	v, err := spgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (spgb *ServicePointGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := spgb.sqlQuery().Query()
	if err := spgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (spgb *ServicePointGroupBy) sqlQuery() *sql.Selector {
	selector := spgb.sql
	columns := make([]string, 0, len(spgb.fields)+len(spgb.fns))
	columns = append(columns, spgb.fields...)
	for _, fn := range spgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(spgb.fields...)
}

// ServicePointSelect is the builder for select fields of ServicePoint entities.
type ServicePointSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (sps *ServicePointSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := sps.path(ctx)
	if err != nil {
		return err
	}
	sps.sql = query
	return sps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sps *ServicePointSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: ServicePointSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sps *ServicePointSelect) StringsX(ctx context.Context) []string {
	v, err := sps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sps *ServicePointSelect) StringX(ctx context.Context) string {
	v, err := sps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: ServicePointSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sps *ServicePointSelect) IntsX(ctx context.Context) []int {
	v, err := sps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sps *ServicePointSelect) IntX(ctx context.Context) int {
	v, err := sps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: ServicePointSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sps *ServicePointSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sps *ServicePointSelect) Float64X(ctx context.Context) float64 {
	v, err := sps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: ServicePointSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sps *ServicePointSelect) BoolsX(ctx context.Context) []bool {
	v, err := sps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (sps *ServicePointSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{servicepoint.Label}
	default:
		err = fmt.Errorf("ent: ServicePointSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sps *ServicePointSelect) BoolX(ctx context.Context) bool {
	v, err := sps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sps *ServicePointSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sps.sqlQuery().Query()
	if err := sps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sps *ServicePointSelect) sqlQuery() sql.Querier {
	selector := sps.sql
	selector.Select(selector.Columns(sps.fields...)...)
	return selector
}
