// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team11/app/ent/book"
	"github.com/team11/app/ent/bookborrow"
	"github.com/team11/app/ent/servicepoint"
	"github.com/team11/app/ent/user"
)

// Bookborrow is the model entity for the Bookborrow schema.
type Bookborrow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BORROWDATE holds the value of the "BORROW_DATE" field.
	BORROWDATE time.Time `json:"BORROW_DATE,omitempty"`
	// DAYOFBORROW holds the value of the "DAY_OF_BORROW" field.
	DAYOFBORROW int `json:"DAY_OF_BORROW,omitempty"`
	// PICKUP holds the value of the "PICKUP" field.
	PICKUP string `json:"PICKUP,omitempty"`
	// PHONENUMBER holds the value of the "PHONE_NUMBER" field.
	PHONENUMBER string `json:"PHONE_NUMBER,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookborrowQuery when eager-loading is set.
	Edges           BookborrowEdges `json:"edges"`
	BOOK_ID         *int
	SERVICEPOINT_ID *int
	USER_ID         *int
}

// BookborrowEdges holds the relations/edges for other nodes in the graph.
type BookborrowEdges struct {
	// USER holds the value of the USER edge.
	USER *User
	// BOOK holds the value of the BOOK edge.
	BOOK *Book
	// SERVICEPOINT holds the value of the SERVICEPOINT edge.
	SERVICEPOINT *ServicePoint
	// Borrowed holds the value of the borrowed edge.
	Borrowed []*Bookreturn
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// USEROrErr returns the USER value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookborrowEdges) USEROrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.USER == nil {
			// The edge USER was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.USER, nil
	}
	return nil, &NotLoadedError{edge: "USER"}
}

// BOOKOrErr returns the BOOK value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookborrowEdges) BOOKOrErr() (*Book, error) {
	if e.loadedTypes[1] {
		if e.BOOK == nil {
			// The edge BOOK was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: book.Label}
		}
		return e.BOOK, nil
	}
	return nil, &NotLoadedError{edge: "BOOK"}
}

// SERVICEPOINTOrErr returns the SERVICEPOINT value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookborrowEdges) SERVICEPOINTOrErr() (*ServicePoint, error) {
	if e.loadedTypes[2] {
		if e.SERVICEPOINT == nil {
			// The edge SERVICEPOINT was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: servicepoint.Label}
		}
		return e.SERVICEPOINT, nil
	}
	return nil, &NotLoadedError{edge: "SERVICEPOINT"}
}

// BorrowedOrErr returns the Borrowed value or an error if the edge
// was not loaded in eager-loading.
func (e BookborrowEdges) BorrowedOrErr() ([]*Bookreturn, error) {
	if e.loadedTypes[3] {
		return e.Borrowed, nil
	}
	return nil, &NotLoadedError{edge: "borrowed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bookborrow) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // BORROW_DATE
		&sql.NullInt64{},  // DAY_OF_BORROW
		&sql.NullString{}, // PICKUP
		&sql.NullString{}, // PHONE_NUMBER
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bookborrow) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // BOOK_ID
		&sql.NullInt64{}, // SERVICEPOINT_ID
		&sql.NullInt64{}, // USER_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bookborrow fields.
func (b *Bookborrow) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bookborrow.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field BORROW_DATE", values[0])
	} else if value.Valid {
		b.BORROWDATE = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field DAY_OF_BORROW", values[1])
	} else if value.Valid {
		b.DAYOFBORROW = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PICKUP", values[2])
	} else if value.Valid {
		b.PICKUP = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PHONE_NUMBER", values[3])
	} else if value.Valid {
		b.PHONENUMBER = value.String
	}
	values = values[4:]
	if len(values) == len(bookborrow.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field BOOK_ID", value)
		} else if value.Valid {
			b.BOOK_ID = new(int)
			*b.BOOK_ID = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field SERVICEPOINT_ID", value)
		} else if value.Valid {
			b.SERVICEPOINT_ID = new(int)
			*b.SERVICEPOINT_ID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field USER_ID", value)
		} else if value.Valid {
			b.USER_ID = new(int)
			*b.USER_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryUSER queries the USER edge of the Bookborrow.
func (b *Bookborrow) QueryUSER() *UserQuery {
	return (&BookborrowClient{config: b.config}).QueryUSER(b)
}

// QueryBOOK queries the BOOK edge of the Bookborrow.
func (b *Bookborrow) QueryBOOK() *BookQuery {
	return (&BookborrowClient{config: b.config}).QueryBOOK(b)
}

// QuerySERVICEPOINT queries the SERVICEPOINT edge of the Bookborrow.
func (b *Bookborrow) QuerySERVICEPOINT() *ServicePointQuery {
	return (&BookborrowClient{config: b.config}).QuerySERVICEPOINT(b)
}

// QueryBorrowed queries the borrowed edge of the Bookborrow.
func (b *Bookborrow) QueryBorrowed() *BookreturnQuery {
	return (&BookborrowClient{config: b.config}).QueryBorrowed(b)
}

// Update returns a builder for updating this Bookborrow.
// Note that, you need to call Bookborrow.Unwrap() before calling this method, if this Bookborrow
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bookborrow) Update() *BookborrowUpdateOne {
	return (&BookborrowClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bookborrow) Unwrap() *Bookborrow {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bookborrow is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bookborrow) String() string {
	var builder strings.Builder
	builder.WriteString("Bookborrow(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", BORROW_DATE=")
	builder.WriteString(b.BORROWDATE.Format(time.ANSIC))
	builder.WriteString(", DAY_OF_BORROW=")
	builder.WriteString(fmt.Sprintf("%v", b.DAYOFBORROW))
	builder.WriteString(", PICKUP=")
	builder.WriteString(b.PICKUP)
	builder.WriteString(", PHONE_NUMBER=")
	builder.WriteString(b.PHONENUMBER)
	builder.WriteByte(')')
	return builder.String()
}

// Bookborrows is a parsable slice of Bookborrow.
type Bookborrows []*Bookborrow

func (b Bookborrows) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
