// Code generated by entc, DO NOT EDIT.

package book

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBookName holds the string denoting the bookname field in the database.
	FieldBookName = "book_name"

	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "status"
	// EdgeBooklist holds the string denoting the booklist edge name in mutations.
	EdgeBooklist = "booklist"

	// Table holds the table name of the book in the database.
	Table = "books"
	// CategoryTable is the table the holds the category relation/edge.
	CategoryTable = "books"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "Category_id"
	// AuthorTable is the table the holds the author relation/edge.
	AuthorTable = "books"
	// AuthorInverseTable is the table name for the Author entity.
	// It exists in this package in order to avoid circular dependency with the "author" package.
	AuthorInverseTable = "authors"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "AUTHOR_ID"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "books"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "USER_ID"
	// StatusTable is the table the holds the status relation/edge.
	StatusTable = "books"
	// StatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatusInverseTable = "status"
	// StatusColumn is the table column denoting the status relation/edge.
	StatusColumn = "STATUS_ID"
	// BooklistTable is the table the holds the booklist relation/edge.
	BooklistTable = "bookborrows"
	// BooklistInverseTable is the table name for the Bookborrow entity.
	// It exists in this package in order to avoid circular dependency with the "bookborrow" package.
	BooklistInverseTable = "bookborrows"
	// BooklistColumn is the table column denoting the booklist relation/edge.
	BooklistColumn = "BOOK_ID"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldBookName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Book type.
var ForeignKeys = []string{
	"AUTHOR_ID",
	"Category_id",
	"STATUS_ID",
	"USER_ID",
}

var (
	// BookNameValidator is a validator for the "BookName" field. It is called by the builders before save.
	BookNameValidator func(string) error
)
