// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team11/app/ent/preemption"
	"github.com/team11/app/ent/roominfo"
)

// RoominfoCreate is the builder for creating a Roominfo entity.
type RoominfoCreate struct {
	config
	mutation *RoominfoMutation
	hooks    []Hook
}

// SetRoomID sets the RoomID field.
func (rc *RoominfoCreate) SetRoomID(s string) *RoominfoCreate {
	rc.mutation.SetRoomID(s)
	return rc
}

// SetRoomNo sets the RoomNo field.
func (rc *RoominfoCreate) SetRoomNo(s string) *RoominfoCreate {
	rc.mutation.SetRoomNo(s)
	return rc
}

// SetRoomType sets the RoomType field.
func (rc *RoominfoCreate) SetRoomType(s string) *RoominfoCreate {
	rc.mutation.SetRoomType(s)
	return rc
}

// SetRoomTime sets the RoomTime field.
func (rc *RoominfoCreate) SetRoomTime(s string) *RoominfoCreate {
	rc.mutation.SetRoomTime(s)
	return rc
}

// SetRoomStatus sets the RoomStatus field.
func (rc *RoominfoCreate) SetRoomStatus(s string) *RoominfoCreate {
	rc.mutation.SetRoomStatus(s)
	return rc
}

// AddPreemptionIDs adds the preemption edge to Preemption by ids.
func (rc *RoominfoCreate) AddPreemptionIDs(ids ...int) *RoominfoCreate {
	rc.mutation.AddPreemptionIDs(ids...)
	return rc
}

// AddPreemption adds the preemption edges to Preemption.
func (rc *RoominfoCreate) AddPreemption(p ...*Preemption) *RoominfoCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPreemptionIDs(ids...)
}

// Mutation returns the RoominfoMutation object of the builder.
func (rc *RoominfoCreate) Mutation() *RoominfoMutation {
	return rc.mutation
}

// Save creates the Roominfo in the database.
func (rc *RoominfoCreate) Save(ctx context.Context) (*Roominfo, error) {
	if _, ok := rc.mutation.RoomID(); !ok {
		return nil, &ValidationError{Name: "RoomID", err: errors.New("ent: missing required field \"RoomID\"")}
	}
	if _, ok := rc.mutation.RoomNo(); !ok {
		return nil, &ValidationError{Name: "RoomNo", err: errors.New("ent: missing required field \"RoomNo\"")}
	}
	if v, ok := rc.mutation.RoomNo(); ok {
		if err := roominfo.RoomNoValidator(v); err != nil {
			return nil, &ValidationError{Name: "RoomNo", err: fmt.Errorf("ent: validator failed for field \"RoomNo\": %w", err)}
		}
	}
	if _, ok := rc.mutation.RoomType(); !ok {
		return nil, &ValidationError{Name: "RoomType", err: errors.New("ent: missing required field \"RoomType\"")}
	}
	if v, ok := rc.mutation.RoomType(); ok {
		if err := roominfo.RoomTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "RoomType", err: fmt.Errorf("ent: validator failed for field \"RoomType\": %w", err)}
		}
	}
	if _, ok := rc.mutation.RoomTime(); !ok {
		return nil, &ValidationError{Name: "RoomTime", err: errors.New("ent: missing required field \"RoomTime\"")}
	}
	if v, ok := rc.mutation.RoomTime(); ok {
		if err := roominfo.RoomTimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "RoomTime", err: fmt.Errorf("ent: validator failed for field \"RoomTime\": %w", err)}
		}
	}
	if _, ok := rc.mutation.RoomStatus(); !ok {
		return nil, &ValidationError{Name: "RoomStatus", err: errors.New("ent: missing required field \"RoomStatus\"")}
	}
	if v, ok := rc.mutation.RoomStatus(); ok {
		if err := roominfo.RoomStatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "RoomStatus", err: fmt.Errorf("ent: validator failed for field \"RoomStatus\": %w", err)}
		}
	}
	var (
		err  error
		node *Roominfo
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoominfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoominfoCreate) SaveX(ctx context.Context) *Roominfo {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoominfoCreate) sqlSave(ctx context.Context) (*Roominfo, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoominfoCreate) createSpec() (*Roominfo, *sqlgraph.CreateSpec) {
	var (
		r     = &Roominfo{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roominfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roominfo.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.RoomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roominfo.FieldRoomID,
		})
		r.RoomID = value
	}
	if value, ok := rc.mutation.RoomNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roominfo.FieldRoomNo,
		})
		r.RoomNo = value
	}
	if value, ok := rc.mutation.RoomType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roominfo.FieldRoomType,
		})
		r.RoomType = value
	}
	if value, ok := rc.mutation.RoomTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roominfo.FieldRoomTime,
		})
		r.RoomTime = value
	}
	if value, ok := rc.mutation.RoomStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roominfo.FieldRoomStatus,
		})
		r.RoomStatus = value
	}
	if nodes := rc.mutation.PreemptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roominfo.PreemptionTable,
			Columns: []string{roominfo.PreemptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preemption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
