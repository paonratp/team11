// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team11/app/ent/author"
)

// Author is the model entity for the Author schema.
type Author struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorQuery when eager-loading is set.
	Edges AuthorEdges `json:"edges"`
}

// AuthorEdges holds the relations/edges for other nodes in the graph.
type AuthorEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*Research
	// Writer holds the value of the writer edge.
	Writer []*Book
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorEdges) OwnerOrErr() ([]*Research, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// WriterOrErr returns the Writer value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorEdges) WriterOrErr() ([]*Book, error) {
	if e.loadedTypes[1] {
		return e.Writer, nil
	}
	return nil, &NotLoadedError{edge: "writer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Author) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Author fields.
func (a *Author) assignValues(values ...interface{}) error {
	if m, n := len(values), len(author.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	return nil
}

// QueryOwner queries the owner edge of the Author.
func (a *Author) QueryOwner() *ResearchQuery {
	return (&AuthorClient{config: a.config}).QueryOwner(a)
}

// QueryWriter queries the writer edge of the Author.
func (a *Author) QueryWriter() *BookQuery {
	return (&AuthorClient{config: a.config}).QueryWriter(a)
}

// Update returns a builder for updating this Author.
// Note that, you need to call Author.Unwrap() before calling this method, if this Author
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Author) Update() *AuthorUpdateOne {
	return (&AuthorClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Author) Unwrap() *Author {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Author is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Author) String() string {
	var builder strings.Builder
	builder.WriteString("Author(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", Name=")
	builder.WriteString(a.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Authors is a parsable slice of Author.
type Authors []*Author

func (a Authors) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
