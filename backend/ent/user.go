// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team11/app/ent/role"
	"github.com/team11/app/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// USEREMAIL holds the value of the "USER_EMAIL" field.
	USEREMAIL string `json:"USER_EMAIL,omitempty"`
	// USERNAME holds the value of the "USER_NAME" field.
	USERNAME string `json:"USER_NAME,omitempty"`
	// PASSWORD holds the value of the "PASSWORD" field.
	PASSWORD string `json:"PASSWORD,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges   UserEdges `json:"edges"`
	ROLE_ID *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Position holds the value of the position edge.
	Position *Role
	// Booking holds the value of the booking edge.
	Booking []*Booking
	// Addby holds the value of the addby edge.
	Addby []*Book
	// Borrow holds the value of the borrow edge.
	Borrow []*Bookborrow
	// Preemption holds the value of the preemption edge.
	Preemption []*Preemption
	// Record holds the value of the record edge.
	Record []*Research
	// Return holds the value of the return edge.
	Return []*Bookreturn
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// PositionOrErr returns the Position value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) PositionOrErr() (*Role, error) {
	if e.loadedTypes[0] {
		if e.Position == nil {
			// The edge position was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Position, nil
	}
	return nil, &NotLoadedError{edge: "position"}
}

// BookingOrErr returns the Booking value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BookingOrErr() ([]*Booking, error) {
	if e.loadedTypes[1] {
		return e.Booking, nil
	}
	return nil, &NotLoadedError{edge: "booking"}
}

// AddbyOrErr returns the Addby value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AddbyOrErr() ([]*Book, error) {
	if e.loadedTypes[2] {
		return e.Addby, nil
	}
	return nil, &NotLoadedError{edge: "addby"}
}

// BorrowOrErr returns the Borrow value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BorrowOrErr() ([]*Bookborrow, error) {
	if e.loadedTypes[3] {
		return e.Borrow, nil
	}
	return nil, &NotLoadedError{edge: "borrow"}
}

// PreemptionOrErr returns the Preemption value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PreemptionOrErr() ([]*Preemption, error) {
	if e.loadedTypes[4] {
		return e.Preemption, nil
	}
	return nil, &NotLoadedError{edge: "preemption"}
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RecordOrErr() ([]*Research, error) {
	if e.loadedTypes[5] {
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// ReturnOrErr returns the Return value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReturnOrErr() ([]*Bookreturn, error) {
	if e.loadedTypes[6] {
		return e.Return, nil
	}
	return nil, &NotLoadedError{edge: "return"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // USER_EMAIL
		&sql.NullString{}, // USER_NAME
		&sql.NullString{}, // PASSWORD
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // ROLE_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field USER_EMAIL", values[0])
	} else if value.Valid {
		u.USEREMAIL = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field USER_NAME", values[1])
	} else if value.Valid {
		u.USERNAME = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PASSWORD", values[2])
	} else if value.Valid {
		u.PASSWORD = value.String
	}
	values = values[3:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ROLE_ID", value)
		} else if value.Valid {
			u.ROLE_ID = new(int)
			*u.ROLE_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryPosition queries the position edge of the User.
func (u *User) QueryPosition() *RoleQuery {
	return (&UserClient{config: u.config}).QueryPosition(u)
}

// QueryBooking queries the booking edge of the User.
func (u *User) QueryBooking() *BookingQuery {
	return (&UserClient{config: u.config}).QueryBooking(u)
}

// QueryAddby queries the addby edge of the User.
func (u *User) QueryAddby() *BookQuery {
	return (&UserClient{config: u.config}).QueryAddby(u)
}

// QueryBorrow queries the borrow edge of the User.
func (u *User) QueryBorrow() *BookborrowQuery {
	return (&UserClient{config: u.config}).QueryBorrow(u)
}

// QueryPreemption queries the preemption edge of the User.
func (u *User) QueryPreemption() *PreemptionQuery {
	return (&UserClient{config: u.config}).QueryPreemption(u)
}

// QueryRecord queries the record edge of the User.
func (u *User) QueryRecord() *ResearchQuery {
	return (&UserClient{config: u.config}).QueryRecord(u)
}

// QueryReturn queries the return edge of the User.
func (u *User) QueryReturn() *BookreturnQuery {
	return (&UserClient{config: u.config}).QueryReturn(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", USER_EMAIL=")
	builder.WriteString(u.USEREMAIL)
	builder.WriteString(", USER_NAME=")
	builder.WriteString(u.USERNAME)
	builder.WriteString(", PASSWORD=")
	builder.WriteString(u.PASSWORD)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
