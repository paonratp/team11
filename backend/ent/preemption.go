// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team11/app/ent/preemption"
	"github.com/team11/app/ent/purpose"
	"github.com/team11/app/ent/roominfo"
	"github.com/team11/app/ent/user"
)

// Preemption is the model entity for the Preemption schema.
type Preemption struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PreemptTime holds the value of the "PreemptTime" field.
	PreemptTime time.Time `json:"PreemptTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PreemptionQuery when eager-loading is set.
	Edges     PreemptionEdges `json:"edges"`
	PurposeID *int
	RoomID    *int
	USER_ID   *int
}

// PreemptionEdges holds the relations/edges for other nodes in the graph.
type PreemptionEdges struct {
	// UserID holds the value of the User_ID edge.
	UserID *User
	// PurposeID holds the value of the PurposeID edge.
	PurposeID *Purpose
	// RoomID holds the value of the RoomID edge.
	RoomID *Roominfo
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PreemptionEdges) UserIDOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.UserID == nil {
			// The edge User_ID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserID, nil
	}
	return nil, &NotLoadedError{edge: "User_ID"}
}

// PurposeIDOrErr returns the PurposeID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PreemptionEdges) PurposeIDOrErr() (*Purpose, error) {
	if e.loadedTypes[1] {
		if e.PurposeID == nil {
			// The edge PurposeID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: purpose.Label}
		}
		return e.PurposeID, nil
	}
	return nil, &NotLoadedError{edge: "PurposeID"}
}

// RoomIDOrErr returns the RoomID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PreemptionEdges) RoomIDOrErr() (*Roominfo, error) {
	if e.loadedTypes[2] {
		if e.RoomID == nil {
			// The edge RoomID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roominfo.Label}
		}
		return e.RoomID, nil
	}
	return nil, &NotLoadedError{edge: "RoomID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Preemption) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // PreemptTime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Preemption) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // PurposeID
		&sql.NullInt64{}, // RoomID
		&sql.NullInt64{}, // USER_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Preemption fields.
func (pr *Preemption) assignValues(values ...interface{}) error {
	if m, n := len(values), len(preemption.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field PreemptTime", values[0])
	} else if value.Valid {
		pr.PreemptTime = value.Time
	}
	values = values[1:]
	if len(values) == len(preemption.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field PurposeID", value)
		} else if value.Valid {
			pr.PurposeID = new(int)
			*pr.PurposeID = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field RoomID", value)
		} else if value.Valid {
			pr.RoomID = new(int)
			*pr.RoomID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field USER_ID", value)
		} else if value.Valid {
			pr.USER_ID = new(int)
			*pr.USER_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryUserID queries the User_ID edge of the Preemption.
func (pr *Preemption) QueryUserID() *UserQuery {
	return (&PreemptionClient{config: pr.config}).QueryUserID(pr)
}

// QueryPurposeID queries the PurposeID edge of the Preemption.
func (pr *Preemption) QueryPurposeID() *PurposeQuery {
	return (&PreemptionClient{config: pr.config}).QueryPurposeID(pr)
}

// QueryRoomID queries the RoomID edge of the Preemption.
func (pr *Preemption) QueryRoomID() *RoominfoQuery {
	return (&PreemptionClient{config: pr.config}).QueryRoomID(pr)
}

// Update returns a builder for updating this Preemption.
// Note that, you need to call Preemption.Unwrap() before calling this method, if this Preemption
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Preemption) Update() *PreemptionUpdateOne {
	return (&PreemptionClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Preemption) Unwrap() *Preemption {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Preemption is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Preemption) String() string {
	var builder strings.Builder
	builder.WriteString("Preemption(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", PreemptTime=")
	builder.WriteString(pr.PreemptTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Preemptions is a parsable slice of Preemption.
type Preemptions []*Preemption

func (pr Preemptions) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
