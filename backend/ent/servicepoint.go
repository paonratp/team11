// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team11/app/ent/servicepoint"
)

// ServicePoint is the model entity for the ServicePoint schema.
type ServicePoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// COUNTERNUMBER holds the value of the "COUNTER_NUMBER" field.
	COUNTERNUMBER string `json:"COUNTER_NUMBER,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServicePointQuery when eager-loading is set.
	Edges ServicePointEdges `json:"edges"`
}

// ServicePointEdges holds the relations/edges for other nodes in the graph.
type ServicePointEdges struct {
	// From holds the value of the from edge.
	From []*Bookborrow
	// Servicepoint holds the value of the servicepoint edge.
	Servicepoint []*Booking
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading.
func (e ServicePointEdges) FromOrErr() ([]*Bookborrow, error) {
	if e.loadedTypes[0] {
		return e.From, nil
	}
	return nil, &NotLoadedError{edge: "from"}
}

// ServicepointOrErr returns the Servicepoint value or an error if the edge
// was not loaded in eager-loading.
func (e ServicePointEdges) ServicepointOrErr() ([]*Booking, error) {
	if e.loadedTypes[1] {
		return e.Servicepoint, nil
	}
	return nil, &NotLoadedError{edge: "servicepoint"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServicePoint) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // COUNTER_NUMBER
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServicePoint fields.
func (sp *ServicePoint) assignValues(values ...interface{}) error {
	if m, n := len(values), len(servicepoint.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	sp.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field COUNTER_NUMBER", values[0])
	} else if value.Valid {
		sp.COUNTERNUMBER = value.String
	}
	return nil
}

// QueryFrom queries the from edge of the ServicePoint.
func (sp *ServicePoint) QueryFrom() *BookborrowQuery {
	return (&ServicePointClient{config: sp.config}).QueryFrom(sp)
}

// QueryServicepoint queries the servicepoint edge of the ServicePoint.
func (sp *ServicePoint) QueryServicepoint() *BookingQuery {
	return (&ServicePointClient{config: sp.config}).QueryServicepoint(sp)
}

// Update returns a builder for updating this ServicePoint.
// Note that, you need to call ServicePoint.Unwrap() before calling this method, if this ServicePoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ServicePoint) Update() *ServicePointUpdateOne {
	return (&ServicePointClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sp *ServicePoint) Unwrap() *ServicePoint {
	tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServicePoint is not a transactional entity")
	}
	sp.config.driver = tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ServicePoint) String() string {
	var builder strings.Builder
	builder.WriteString("ServicePoint(")
	builder.WriteString(fmt.Sprintf("id=%v", sp.ID))
	builder.WriteString(", COUNTER_NUMBER=")
	builder.WriteString(sp.COUNTERNUMBER)
	builder.WriteByte(')')
	return builder.String()
}

// ServicePoints is a parsable slice of ServicePoint.
type ServicePoints []*ServicePoint

func (sp ServicePoints) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
