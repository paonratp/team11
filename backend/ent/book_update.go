// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team11/app/ent/author"
	"github.com/team11/app/ent/book"
	"github.com/team11/app/ent/bookborrow"
	"github.com/team11/app/ent/category"
	"github.com/team11/app/ent/predicate"
	"github.com/team11/app/ent/status"
	"github.com/team11/app/ent/user"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks      []Hook
	mutation   *BookMutation
	predicates []predicate.Book
}

// Where adds a new predicate for the builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetBookName sets the BookName field.
func (bu *BookUpdate) SetBookName(s string) *BookUpdate {
	bu.mutation.SetBookName(s)
	return bu
}

// SetBarcode sets the Barcode field.
func (bu *BookUpdate) SetBarcode(s string) *BookUpdate {
	bu.mutation.SetBarcode(s)
	return bu
}

// SetBookPage sets the BookPage field.
func (bu *BookUpdate) SetBookPage(i int) *BookUpdate {
	bu.mutation.ResetBookPage()
	bu.mutation.SetBookPage(i)
	return bu
}

// AddBookPage adds i to BookPage.
func (bu *BookUpdate) AddBookPage(i int) *BookUpdate {
	bu.mutation.AddBookPage(i)
	return bu
}

// SetCategoryID sets the category edge to Category by id.
func (bu *BookUpdate) SetCategoryID(id int) *BookUpdate {
	bu.mutation.SetCategoryID(id)
	return bu
}

// SetNillableCategoryID sets the category edge to Category by id if the given value is not nil.
func (bu *BookUpdate) SetNillableCategoryID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetCategoryID(*id)
	}
	return bu
}

// SetCategory sets the category edge to Category.
func (bu *BookUpdate) SetCategory(c *Category) *BookUpdate {
	return bu.SetCategoryID(c.ID)
}

// SetAuthorID sets the author edge to Author by id.
func (bu *BookUpdate) SetAuthorID(id int) *BookUpdate {
	bu.mutation.SetAuthorID(id)
	return bu
}

// SetNillableAuthorID sets the author edge to Author by id if the given value is not nil.
func (bu *BookUpdate) SetNillableAuthorID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetAuthorID(*id)
	}
	return bu
}

// SetAuthor sets the author edge to Author.
func (bu *BookUpdate) SetAuthor(a *Author) *BookUpdate {
	return bu.SetAuthorID(a.ID)
}

// SetUserID sets the user edge to User by id.
func (bu *BookUpdate) SetUserID(id int) *BookUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (bu *BookUpdate) SetNillableUserID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the user edge to User.
func (bu *BookUpdate) SetUser(u *User) *BookUpdate {
	return bu.SetUserID(u.ID)
}

// SetStatusID sets the status edge to Status by id.
func (bu *BookUpdate) SetStatusID(id int) *BookUpdate {
	bu.mutation.SetStatusID(id)
	return bu
}

// SetNillableStatusID sets the status edge to Status by id if the given value is not nil.
func (bu *BookUpdate) SetNillableStatusID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetStatusID(*id)
	}
	return bu
}

// SetStatus sets the status edge to Status.
func (bu *BookUpdate) SetStatus(s *Status) *BookUpdate {
	return bu.SetStatusID(s.ID)
}

// AddBooklistIDs adds the booklist edge to Bookborrow by ids.
func (bu *BookUpdate) AddBooklistIDs(ids ...int) *BookUpdate {
	bu.mutation.AddBooklistIDs(ids...)
	return bu
}

// AddBooklist adds the booklist edges to Bookborrow.
func (bu *BookUpdate) AddBooklist(b ...*Bookborrow) *BookUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBooklistIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearCategory clears the category edge to Category.
func (bu *BookUpdate) ClearCategory() *BookUpdate {
	bu.mutation.ClearCategory()
	return bu
}

// ClearAuthor clears the author edge to Author.
func (bu *BookUpdate) ClearAuthor() *BookUpdate {
	bu.mutation.ClearAuthor()
	return bu
}

// ClearUser clears the user edge to User.
func (bu *BookUpdate) ClearUser() *BookUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearStatus clears the status edge to Status.
func (bu *BookUpdate) ClearStatus() *BookUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// RemoveBooklistIDs removes the booklist edge to Bookborrow by ids.
func (bu *BookUpdate) RemoveBooklistIDs(ids ...int) *BookUpdate {
	bu.mutation.RemoveBooklistIDs(ids...)
	return bu
}

// RemoveBooklist removes booklist edges to Bookborrow.
func (bu *BookUpdate) RemoveBooklist(b ...*Bookborrow) *BookUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBooklistIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bu.mutation.BookName(); ok {
		if err := book.BookNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "BookName", err: fmt.Errorf("ent: validator failed for field \"BookName\": %w", err)}
		}
	}
	if v, ok := bu.mutation.Barcode(); ok {
		if err := book.BarcodeValidator(v); err != nil {
			return 0, &ValidationError{Name: "Barcode", err: fmt.Errorf("ent: validator failed for field \"Barcode\": %w", err)}
		}
	}
	if v, ok := bu.mutation.BookPage(); ok {
		if err := book.BookPageValidator(v); err != nil {
			return 0, &ValidationError{Name: "BookPage", err: fmt.Errorf("ent: validator failed for field \"BookPage\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   book.Table,
			Columns: book.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: book.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BookName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldBookName,
		})
	}
	if value, ok := bu.mutation.Barcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldBarcode,
		})
	}
	if value, ok := bu.mutation.BookPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: book.FieldBookPage,
		})
	}
	if value, ok := bu.mutation.AddedBookPage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: book.FieldBookPage,
		})
	}
	if bu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CategoryTable,
			Columns: []string{book.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CategoryTable,
			Columns: []string{book.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.AuthorTable,
			Columns: []string{book.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: author.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.AuthorTable,
			Columns: []string{book.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.StatusTable,
			Columns: []string{book.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.StatusTable,
			Columns: []string{book.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := bu.mutation.RemovedBooklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.BooklistTable,
			Columns: []string{book.BooklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BooklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.BooklistTable,
			Columns: []string{book.BooklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// SetBookName sets the BookName field.
func (buo *BookUpdateOne) SetBookName(s string) *BookUpdateOne {
	buo.mutation.SetBookName(s)
	return buo
}

// SetBarcode sets the Barcode field.
func (buo *BookUpdateOne) SetBarcode(s string) *BookUpdateOne {
	buo.mutation.SetBarcode(s)
	return buo
}

// SetBookPage sets the BookPage field.
func (buo *BookUpdateOne) SetBookPage(i int) *BookUpdateOne {
	buo.mutation.ResetBookPage()
	buo.mutation.SetBookPage(i)
	return buo
}

// AddBookPage adds i to BookPage.
func (buo *BookUpdateOne) AddBookPage(i int) *BookUpdateOne {
	buo.mutation.AddBookPage(i)
	return buo
}

// SetCategoryID sets the category edge to Category by id.
func (buo *BookUpdateOne) SetCategoryID(id int) *BookUpdateOne {
	buo.mutation.SetCategoryID(id)
	return buo
}

// SetNillableCategoryID sets the category edge to Category by id if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCategoryID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetCategoryID(*id)
	}
	return buo
}

// SetCategory sets the category edge to Category.
func (buo *BookUpdateOne) SetCategory(c *Category) *BookUpdateOne {
	return buo.SetCategoryID(c.ID)
}

// SetAuthorID sets the author edge to Author by id.
func (buo *BookUpdateOne) SetAuthorID(id int) *BookUpdateOne {
	buo.mutation.SetAuthorID(id)
	return buo
}

// SetNillableAuthorID sets the author edge to Author by id if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAuthorID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetAuthorID(*id)
	}
	return buo
}

// SetAuthor sets the author edge to Author.
func (buo *BookUpdateOne) SetAuthor(a *Author) *BookUpdateOne {
	return buo.SetAuthorID(a.ID)
}

// SetUserID sets the user edge to User by id.
func (buo *BookUpdateOne) SetUserID(id int) *BookUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (buo *BookUpdateOne) SetNillableUserID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the user edge to User.
func (buo *BookUpdateOne) SetUser(u *User) *BookUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetStatusID sets the status edge to Status by id.
func (buo *BookUpdateOne) SetStatusID(id int) *BookUpdateOne {
	buo.mutation.SetStatusID(id)
	return buo
}

// SetNillableStatusID sets the status edge to Status by id if the given value is not nil.
func (buo *BookUpdateOne) SetNillableStatusID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetStatusID(*id)
	}
	return buo
}

// SetStatus sets the status edge to Status.
func (buo *BookUpdateOne) SetStatus(s *Status) *BookUpdateOne {
	return buo.SetStatusID(s.ID)
}

// AddBooklistIDs adds the booklist edge to Bookborrow by ids.
func (buo *BookUpdateOne) AddBooklistIDs(ids ...int) *BookUpdateOne {
	buo.mutation.AddBooklistIDs(ids...)
	return buo
}

// AddBooklist adds the booklist edges to Bookborrow.
func (buo *BookUpdateOne) AddBooklist(b ...*Bookborrow) *BookUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBooklistIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearCategory clears the category edge to Category.
func (buo *BookUpdateOne) ClearCategory() *BookUpdateOne {
	buo.mutation.ClearCategory()
	return buo
}

// ClearAuthor clears the author edge to Author.
func (buo *BookUpdateOne) ClearAuthor() *BookUpdateOne {
	buo.mutation.ClearAuthor()
	return buo
}

// ClearUser clears the user edge to User.
func (buo *BookUpdateOne) ClearUser() *BookUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearStatus clears the status edge to Status.
func (buo *BookUpdateOne) ClearStatus() *BookUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// RemoveBooklistIDs removes the booklist edge to Bookborrow by ids.
func (buo *BookUpdateOne) RemoveBooklistIDs(ids ...int) *BookUpdateOne {
	buo.mutation.RemoveBooklistIDs(ids...)
	return buo
}

// RemoveBooklist removes booklist edges to Bookborrow.
func (buo *BookUpdateOne) RemoveBooklist(b ...*Bookborrow) *BookUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBooklistIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	if v, ok := buo.mutation.BookName(); ok {
		if err := book.BookNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "BookName", err: fmt.Errorf("ent: validator failed for field \"BookName\": %w", err)}
		}
	}
	if v, ok := buo.mutation.Barcode(); ok {
		if err := book.BarcodeValidator(v); err != nil {
			return nil, &ValidationError{Name: "Barcode", err: fmt.Errorf("ent: validator failed for field \"Barcode\": %w", err)}
		}
	}
	if v, ok := buo.mutation.BookPage(); ok {
		if err := book.BookPageValidator(v); err != nil {
			return nil, &ValidationError{Name: "BookPage", err: fmt.Errorf("ent: validator failed for field \"BookPage\": %w", err)}
		}
	}

	var (
		err  error
		node *Book
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (b *Book, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   book.Table,
			Columns: book.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: book.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Book.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.BookName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldBookName,
		})
	}
	if value, ok := buo.mutation.Barcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldBarcode,
		})
	}
	if value, ok := buo.mutation.BookPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: book.FieldBookPage,
		})
	}
	if value, ok := buo.mutation.AddedBookPage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: book.FieldBookPage,
		})
	}
	if buo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CategoryTable,
			Columns: []string{book.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CategoryTable,
			Columns: []string{book.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.AuthorTable,
			Columns: []string{book.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: author.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.AuthorTable,
			Columns: []string{book.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.StatusTable,
			Columns: []string{book.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.StatusTable,
			Columns: []string{book.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := buo.mutation.RemovedBooklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.BooklistTable,
			Columns: []string{book.BooklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BooklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.BooklistTable,
			Columns: []string{book.BooklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookborrow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Book{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
